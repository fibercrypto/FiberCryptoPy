# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fibercryptopy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fibercryptopy')
    _fibercryptopy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fibercryptopy', [dirname(__file__)])
        except ImportError:
            import _fibercryptopy
            return _fibercryptopy
        try:
            _mod = imp.load_module('_fibercryptopy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fibercryptopy = swig_import_helper()
    del swig_import_helper
else:
    import _fibercryptopy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class cipher_PubKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_PubKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_PubKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_PubKey_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_PubKey_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_PubKey_data_get, _fibercryptopy.cipher_PubKey_data_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_PubKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_PubKey
    __del__ = lambda self: None
cipher_PubKey_swigregister = _fibercryptopy.cipher_PubKey_swigregister
cipher_PubKey_swigregister(cipher_PubKey)

class cipher_SecKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SecKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SecKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_SecKey_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_SecKey_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_SecKey_data_get, _fibercryptopy.cipher_SecKey_data_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_SecKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_SecKey
    __del__ = lambda self: None
cipher_SecKey_swigregister = _fibercryptopy.cipher_SecKey_swigregister
cipher_SecKey_swigregister(cipher_SecKey)

class cipher_Ripemd160(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Ripemd160, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Ripemd160, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_Ripemd160_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_Ripemd160_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_Ripemd160_data_get, _fibercryptopy.cipher_Ripemd160_data_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_Ripemd160()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_Ripemd160
    __del__ = lambda self: None
cipher_Ripemd160_swigregister = _fibercryptopy.cipher_Ripemd160_swigregister
cipher_Ripemd160_swigregister(cipher_Ripemd160)

class cipher_Sig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Sig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Sig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_Sig_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_Sig_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_Sig_data_get, _fibercryptopy.cipher_Sig_data_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_Sig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_Sig
    __del__ = lambda self: None
cipher_Sig_swigregister = _fibercryptopy.cipher_Sig_swigregister
cipher_Sig_swigregister(cipher_Sig)

class cipher_SHA256(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SHA256, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SHA256, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_SHA256_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_SHA256_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_SHA256_data_get, _fibercryptopy.cipher_SHA256_data_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_SHA256()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_SHA256
    __del__ = lambda self: None
cipher_SHA256_swigregister = _fibercryptopy.cipher_SHA256_swigregister
cipher_SHA256_swigregister(cipher_SHA256)

class cipher_Checksum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Checksum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Checksum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_Checksum_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_Checksum_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_Checksum_data_get, _fibercryptopy.cipher_Checksum_data_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_Checksum()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_Checksum
    __del__ = lambda self: None
cipher_Checksum_swigregister = _fibercryptopy.cipher_Checksum_swigregister
cipher_Checksum_swigregister(cipher_Checksum)

class cipher_SecKeys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SecKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SecKeys, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_SecKeys_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_SecKeys_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_SecKeys_data_get, _fibercryptopy.cipher_SecKeys_data_set)
    __swig_setmethods__["count"] = _fibercryptopy.cipher_SecKeys_count_set
    __swig_getmethods__["count"] = _fibercryptopy.cipher_SecKeys_count_get
    if _newclass:
        count = _swig_property(_fibercryptopy.cipher_SecKeys_count_get, _fibercryptopy.cipher_SecKeys_count_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_SecKeys()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_SecKeys
    __del__ = lambda self: None
cipher_SecKeys_swigregister = _fibercryptopy.cipher_SecKeys_swigregister
cipher_SecKeys_swigregister(cipher_SecKeys)

class cipher_PubKeys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_PubKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_PubKeys, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_PubKeys_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_PubKeys_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_PubKeys_data_get, _fibercryptopy.cipher_PubKeys_data_set)
    __swig_setmethods__["count"] = _fibercryptopy.cipher_PubKeys_count_set
    __swig_getmethods__["count"] = _fibercryptopy.cipher_PubKeys_count_get
    if _newclass:
        count = _swig_property(_fibercryptopy.cipher_PubKeys_count_get, _fibercryptopy.cipher_PubKeys_count_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_PubKeys()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_PubKeys
    __del__ = lambda self: None
cipher_PubKeys_swigregister = _fibercryptopy.cipher_PubKeys_swigregister
cipher_PubKeys_swigregister(cipher_PubKeys)

class cipher_SHA256s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SHA256s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SHA256s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_SHA256s_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_SHA256s_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_SHA256s_data_get, _fibercryptopy.cipher_SHA256s_data_set)
    __swig_setmethods__["count"] = _fibercryptopy.cipher_SHA256s_count_set
    __swig_getmethods__["count"] = _fibercryptopy.cipher_SHA256s_count_get
    if _newclass:
        count = _swig_property(_fibercryptopy.cipher_SHA256s_count_get, _fibercryptopy.cipher_SHA256s_count_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_SHA256s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_SHA256s
    __del__ = lambda self: None
cipher_SHA256s_swigregister = _fibercryptopy.cipher_SHA256s_swigregister
cipher_SHA256s_swigregister(cipher_SHA256s)

class coin_UxOutArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin_UxOutArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin_UxOutArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.coin_UxOutArray_data_set
    __swig_getmethods__["data"] = _fibercryptopy.coin_UxOutArray_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.coin_UxOutArray_data_get, _fibercryptopy.coin_UxOutArray_data_set)
    __swig_setmethods__["count"] = _fibercryptopy.coin_UxOutArray_count_set
    __swig_getmethods__["count"] = _fibercryptopy.coin_UxOutArray_count_get
    if _newclass:
        count = _swig_property(_fibercryptopy.coin_UxOutArray_count_get, _fibercryptopy.coin_UxOutArray_count_set)

    def __init__(self):
        this = _fibercryptopy.new_coin_UxOutArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_coin_UxOutArray
    __del__ = lambda self: None
coin_UxOutArray_swigregister = _fibercryptopy.coin_UxOutArray_swigregister
coin_UxOutArray_swigregister(coin_UxOutArray)

class cipher_Addresses(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Addresses, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Addresses, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.cipher_Addresses_data_set
    __swig_getmethods__["data"] = _fibercryptopy.cipher_Addresses_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.cipher_Addresses_data_get, _fibercryptopy.cipher_Addresses_data_set)
    __swig_setmethods__["count"] = _fibercryptopy.cipher_Addresses_count_set
    __swig_getmethods__["count"] = _fibercryptopy.cipher_Addresses_count_get
    if _newclass:
        count = _swig_property(_fibercryptopy.cipher_Addresses_count_get, _fibercryptopy.cipher_Addresses_count_set)

    def __init__(self):
        this = _fibercryptopy.new_cipher_Addresses()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_cipher_Addresses
    __del__ = lambda self: None
cipher_Addresses_swigregister = _fibercryptopy.cipher_Addresses_swigregister
cipher_Addresses_swigregister(cipher_Addresses)

class Fee_Calculator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fee_Calculator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fee_Calculator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callback"] = _fibercryptopy.Fee_Calculator_callback_set
    __swig_getmethods__["callback"] = _fibercryptopy.Fee_Calculator_callback_get
    if _newclass:
        callback = _swig_property(_fibercryptopy.Fee_Calculator_callback_get, _fibercryptopy.Fee_Calculator_callback_set)
    __swig_setmethods__["context"] = _fibercryptopy.Fee_Calculator_context_set
    __swig_getmethods__["context"] = _fibercryptopy.Fee_Calculator_context_get
    if _newclass:
        context = _swig_property(_fibercryptopy.Fee_Calculator_context_get, _fibercryptopy.Fee_Calculator_context_set)

    def __init__(self):
        this = _fibercryptopy.new_Fee_Calculator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_Fee_Calculator
    __del__ = lambda self: None
Fee_Calculator_swigregister = _fibercryptopy.Fee_Calculator_swigregister
Fee_Calculator_swigregister(Fee_Calculator)

class _GoString_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _GoString_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _GoString_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _fibercryptopy._GoString__p_set
    __swig_getmethods__["p"] = _fibercryptopy._GoString__p_get
    if _newclass:
        p = _swig_property(_fibercryptopy._GoString__p_get, _fibercryptopy._GoString__p_set)
    __swig_setmethods__["n"] = _fibercryptopy._GoString__n_set
    __swig_getmethods__["n"] = _fibercryptopy._GoString__n_get
    if _newclass:
        n = _swig_property(_fibercryptopy._GoString__n_get, _fibercryptopy._GoString__n_set)

    def __init__(self):
        this = _fibercryptopy.new__GoString_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete__GoString_
    __del__ = lambda self: None
_GoString__swigregister = _fibercryptopy._GoString__swigregister
_GoString__swigregister(_GoString_)

class GoInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _fibercryptopy.GoInterface_t_set
    __swig_getmethods__["t"] = _fibercryptopy.GoInterface_t_get
    if _newclass:
        t = _swig_property(_fibercryptopy.GoInterface_t_get, _fibercryptopy.GoInterface_t_set)
    __swig_setmethods__["v"] = _fibercryptopy.GoInterface_v_set
    __swig_getmethods__["v"] = _fibercryptopy.GoInterface_v_get
    if _newclass:
        v = _swig_property(_fibercryptopy.GoInterface_v_get, _fibercryptopy.GoInterface_v_set)

    def __init__(self):
        this = _fibercryptopy.new_GoInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_GoInterface
    __del__ = lambda self: None
GoInterface_swigregister = _fibercryptopy.GoInterface_swigregister
GoInterface_swigregister(GoInterface)

class GoSlice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoSlice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoSlice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.GoSlice_data_set
    __swig_getmethods__["data"] = _fibercryptopy.GoSlice_data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.GoSlice_data_get, _fibercryptopy.GoSlice_data_set)
    __swig_setmethods__["len"] = _fibercryptopy.GoSlice_len_set
    __swig_getmethods__["len"] = _fibercryptopy.GoSlice_len_get
    if _newclass:
        len = _swig_property(_fibercryptopy.GoSlice_len_get, _fibercryptopy.GoSlice_len_set)
    __swig_setmethods__["cap"] = _fibercryptopy.GoSlice_cap_set
    __swig_getmethods__["cap"] = _fibercryptopy.GoSlice_cap_get
    if _newclass:
        cap = _swig_property(_fibercryptopy.GoSlice_cap_get, _fibercryptopy.GoSlice_cap_set)

    def __init__(self):
        this = _fibercryptopy.new_GoSlice()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_GoSlice
    __del__ = lambda self: None
GoSlice_swigregister = _fibercryptopy.GoSlice_swigregister
GoSlice_swigregister(GoSlice)


def SKY_JsonEncode_Handle(p0, p1):
    return _fibercryptopy.SKY_JsonEncode_Handle(p0, p1)
SKY_JsonEncode_Handle = _fibercryptopy.SKY_JsonEncode_Handle

def FC_util_AltcoinCaption(p0, p1):
    return _fibercryptopy.FC_util_AltcoinCaption(p0, p1)
FC_util_AltcoinCaption = _fibercryptopy.FC_util_AltcoinCaption

def FC_handle_close(p0):
    return _fibercryptopy.FC_handle_close(p0)
FC_handle_close = _fibercryptopy.FC_handle_close

def FC_util_Min(p0, p1, p2):
    return _fibercryptopy.FC_util_Min(p0, p1, p2)
FC_util_Min = _fibercryptopy.FC_util_Min

def FC_util_GetCoinValue(p0, p1, p2):
    return _fibercryptopy.FC_util_GetCoinValue(p0, p1, p2)
FC_util_GetCoinValue = _fibercryptopy.FC_util_GetCoinValue

def FC_util_FormatUint64(p0, p1):
    return _fibercryptopy.FC_util_FormatUint64(p0, p1)
FC_util_FormatUint64 = _fibercryptopy.FC_util_FormatUint64

def FC_util_FormatCoins(p0, p1, p2):
    return _fibercryptopy.FC_util_FormatCoins(p0, p1, p2)
FC_util_FormatCoins = _fibercryptopy.FC_util_FormatCoins

def FC_util_RemoveZeros(p0, p1):
    return _fibercryptopy.FC_util_RemoveZeros(p0, p1)
FC_util_RemoveZeros = _fibercryptopy.FC_util_RemoveZeros

def FC_util_StringInList(p0, p1, p2):
    return _fibercryptopy.FC_util_StringInList(p0, p1, p2)
FC_util_StringInList = _fibercryptopy.FC_util_StringInList
FC_OK = _fibercryptopy.FC_OK
FC_ERROR = _fibercryptopy.FC_ERROR
FC_BAD_HANDLE = _fibercryptopy.FC_BAD_HANDLE
FC_INVALID_TIMESTRING = _fibercryptopy.FC_INVALID_TIMESTRING
class GoComplex64_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoComplex64_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoComplex64_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["real"] = _fibercryptopy.GoComplex64__real_set
    __swig_getmethods__["real"] = _fibercryptopy.GoComplex64__real_get
    if _newclass:
        real = _swig_property(_fibercryptopy.GoComplex64__real_get, _fibercryptopy.GoComplex64__real_set)
    __swig_setmethods__["imaginary"] = _fibercryptopy.GoComplex64__imaginary_set
    __swig_getmethods__["imaginary"] = _fibercryptopy.GoComplex64__imaginary_get
    if _newclass:
        imaginary = _swig_property(_fibercryptopy.GoComplex64__imaginary_get, _fibercryptopy.GoComplex64__imaginary_set)

    def __init__(self):
        this = _fibercryptopy.new_GoComplex64_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_GoComplex64_
    __del__ = lambda self: None
GoComplex64__swigregister = _fibercryptopy.GoComplex64__swigregister
GoComplex64__swigregister(GoComplex64_)

class GoComplex128_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoComplex128_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoComplex128_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["real"] = _fibercryptopy.GoComplex128__real_set
    __swig_getmethods__["real"] = _fibercryptopy.GoComplex128__real_get
    if _newclass:
        real = _swig_property(_fibercryptopy.GoComplex128__real_get, _fibercryptopy.GoComplex128__real_set)
    __swig_setmethods__["imaginary"] = _fibercryptopy.GoComplex128__imaginary_set
    __swig_getmethods__["imaginary"] = _fibercryptopy.GoComplex128__imaginary_get
    if _newclass:
        imaginary = _swig_property(_fibercryptopy.GoComplex128__imaginary_get, _fibercryptopy.GoComplex128__imaginary_set)

    def __init__(self):
        this = _fibercryptopy.new_GoComplex128_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_GoComplex128_
    __del__ = lambda self: None
GoComplex128__swigregister = _fibercryptopy.GoComplex128__swigregister
GoComplex128__swigregister(GoComplex128_)

class GoString_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoString_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoString_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _fibercryptopy.GoString__p_set
    __swig_getmethods__["p"] = _fibercryptopy.GoString__p_get
    if _newclass:
        p = _swig_property(_fibercryptopy.GoString__p_get, _fibercryptopy.GoString__p_set)
    __swig_setmethods__["n"] = _fibercryptopy.GoString__n_set
    __swig_getmethods__["n"] = _fibercryptopy.GoString__n_get
    if _newclass:
        n = _swig_property(_fibercryptopy.GoString__n_get, _fibercryptopy.GoString__n_set)

    def __init__(self):
        this = _fibercryptopy.new_GoString_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_GoString_
    __del__ = lambda self: None
GoString__swigregister = _fibercryptopy.GoString__swigregister
GoString__swigregister(GoString_)

class GoInterface_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoInterface_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoInterface_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _fibercryptopy.GoInterface__t_set
    __swig_getmethods__["t"] = _fibercryptopy.GoInterface__t_get
    if _newclass:
        t = _swig_property(_fibercryptopy.GoInterface__t_get, _fibercryptopy.GoInterface__t_set)
    __swig_setmethods__["v"] = _fibercryptopy.GoInterface__v_set
    __swig_getmethods__["v"] = _fibercryptopy.GoInterface__v_get
    if _newclass:
        v = _swig_property(_fibercryptopy.GoInterface__v_get, _fibercryptopy.GoInterface__v_set)

    def __init__(self):
        this = _fibercryptopy.new_GoInterface_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_GoInterface_
    __del__ = lambda self: None
GoInterface__swigregister = _fibercryptopy.GoInterface__swigregister
GoInterface__swigregister(GoInterface_)

class GoSlice_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoSlice_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoSlice_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fibercryptopy.GoSlice__data_set
    __swig_getmethods__["data"] = _fibercryptopy.GoSlice__data_get
    if _newclass:
        data = _swig_property(_fibercryptopy.GoSlice__data_get, _fibercryptopy.GoSlice__data_set)
    __swig_setmethods__["len"] = _fibercryptopy.GoSlice__len_set
    __swig_getmethods__["len"] = _fibercryptopy.GoSlice__len_get
    if _newclass:
        len = _swig_property(_fibercryptopy.GoSlice__len_get, _fibercryptopy.GoSlice__len_set)
    __swig_setmethods__["cap"] = _fibercryptopy.GoSlice__cap_set
    __swig_getmethods__["cap"] = _fibercryptopy.GoSlice__cap_get
    if _newclass:
        cap = _swig_property(_fibercryptopy.GoSlice__cap_get, _fibercryptopy.GoSlice__cap_set)

    def __init__(self):
        this = _fibercryptopy.new_GoSlice_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fibercryptopy.delete_GoSlice_
    __del__ = lambda self: None
GoSlice__swigregister = _fibercryptopy.GoSlice__swigregister
GoSlice__swigregister(GoSlice_)

# This file is compatible with both classic and new-style classes.


